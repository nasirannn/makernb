import { NextRequest, NextResponse } from 'next/server';
import { consumeUserCredit } from '@/lib/user-db';
import { createGenerationError } from '@/lib/generation-errors-db';
import { query, withTransaction } from '@/lib/neon';


// Cache for processed tasks to handle idempotency
const processedLyricsTasks = new Set<string>();

// Handle Lyrics API callbacks
export async function POST(request: NextRequest) {
  const startTime = Date.now();
  
  try {
    // 1. Fast response - must return response within 15 seconds
    const callbackData = await request.json();
    
    console.log('Received Lyrics callback:', JSON.stringify(callbackData, null, 2));
    
    const { code, msg, data } = callbackData;
    const taskId = data?.task_id;
    
    if (!taskId) {
      console.error('Lyrics callback missing taskId');
      return NextResponse.json({ error: 'taskId is required' }, { status: 400 });
    }

    // 3. Idempotency handling - avoid duplicate processing of same callback
    const taskKey = `lyrics_${taskId}_${code}`;
    if (processedLyricsTasks.has(taskKey)) {
      console.log(`Lyrics task ${taskId} already processed, skipping duplicate`);
      return NextResponse.json({ 
        success: true, 
        message: 'Already processed',
        taskId: taskId,
        processedAt: new Date().toISOString()
      });
    }

    // Mark as processed
    processedLyricsTasks.add(taskKey);

    // 4. Return success response immediately to avoid blocking
    const response = NextResponse.json({ 
      success: true, 
      message: 'Lyrics callback received',
      taskId: taskId,
      processedAt: new Date().toISOString()
    });

    // 5. Process complex logic asynchronously to avoid blocking callback response
    setImmediate(() => {
      processLyricsCallbackAsync(callbackData);
    });
    
    // Log processing time to ensure it's within 15 seconds
    const processingTime = Date.now() - startTime;
    console.log(`Lyrics callback processing time: ${processingTime}ms`);
    
    return response;

  } catch (error) {
    console.error('Lyrics callback processing error:', error);
    
    // Return quick response even on error
    return NextResponse.json(
      { 
        error: 'Internal server error',
        success: false,
        processedAt: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}

// Process lyrics callback data asynchronously
async function processLyricsCallbackAsync(callbackData: any) {
  try {
    const { code, msg, data } = callbackData;
    const taskId = data?.task_id;
    
    if (code === 200 && data?.callbackType === 'complete') {
      // Handle successfully completed callback
      console.log(`Lyrics task ${taskId} generation successful`);
      
      // 检查是否有歌词数据 - 根据真实API响应，成功时data.data是数组，失败时是null
      if (data.data && Array.isArray(data.data) && data.data.length > 0) {
        const successfulLyrics = data.data.find((item: any) => item.status === 'complete');
        
        if (successfulLyrics) {
          console.log(`Generated lyrics: ${successfulLyrics.title}`);

          // 更新数据库中的歌词内容与状态
          try {
            const { title, text } = successfulLyrics;
            const client = await pool.connect();
            try {
              await client.query(
                `UPDATE lyrics_generations
                 SET title = $1, content = $2, status = 'complete', updated_at = NOW()
                 WHERE task_id = $3`,
                [title || 'Lyrics', (text || '').trim(), taskId]
              );
              console.log(`Lyrics record updated for task ${taskId}`);
            } finally {
              client.release();
            }
          } catch (err) {
            console.error('Failed to update lyrics record:', err);
          }

          // 扣减0.4积分
          try {
            // 从数据库获取taskId对应的userId
            const client = await pool.connect();
            try {
              const result = await client.query(
                'SELECT user_id FROM lyrics_generations WHERE task_id = $1',
                [taskId]
              );
              
              if (result.rows.length > 0) {
                const userId = result.rows[0].user_id;
                console.log(`Deducting 1 credit for lyrics generation success, userId: ${userId}`);
                
                // 扣减1积分
                const creditConsumed = await consumeUserCredit(
                  userId,
                  1,
                  'Lyrics generation',
                  taskId,
                  'lyrics_generation'
                );
                
                if (creditConsumed) {
                  console.log(`Successfully deducted 1 credit for lyrics generation task ${taskId}`);
                } else {
                  console.warn(`Failed to deduct credits for lyrics generation task ${taskId}`);
                }
              } else {
                console.warn(`No user found for lyrics task ${taskId}`);
              }
            } finally {
              client.release();
            }
          } catch (error) {
            console.error('Error deducting credits for lyrics generation:', error);
          }

        } else {
          // 所有歌词都失败
          console.log(`All lyrics generation failed for task ${taskId}`);

          try {
            // 更新数据库状态为错误
            const client = await pool.connect();
            try {
              const result = await client.query(
                `UPDATE lyrics_generations
                 SET status = 'error', updated_at = NOW()
                 WHERE task_id = $1
                 RETURNING id, user_id`,
                [taskId]
              );

              if (result.rows.length > 0) {
                const lyricsGeneration = result.rows[0];

                // 创建错误记录
                await createGenerationError(
                  'lyrics_generation',
                  lyricsGeneration.id,
                  'All lyrics generation attempts failed',
                  'GENERATION_FAILED'
                );

                console.log(`Error record created for failed lyrics generation: ${lyricsGeneration.id}`);
              }
            } finally {
              client.release();
            }
          } catch (error) {
            console.error('Failed to update lyrics generation status:', error);
          }
        }
      } else {
        // data.data 为 null 或空数组，说明生成失败（如moderation failed）
        console.log(`Lyrics generation failed for task ${taskId}: ${msg}`);

        try {
          // 更新数据库状态为错误
          const client = await pool.connect();
          try {
            const result = await client.query(
              `UPDATE lyrics_generations
               SET status = 'error', updated_at = NOW()
               WHERE task_id = $1
               RETURNING id, user_id`,
              [taskId]
            );

            if (result.rows.length > 0) {
              const lyricsGeneration = result.rows[0];

              // 创建错误记录
              await createGenerationError(
                'lyrics_generation',
                lyricsGeneration.id,
                msg || 'Lyrics generation failed - content moderation failed',
                'MODERATION_FAILED'
              );

              console.log(`Error record created for moderation failed lyrics: ${lyricsGeneration.id}`);
            }
          } finally {
            client.release();
          }
        } catch (error) {
          console.error('Failed to update lyrics generation status:', error);
        }
      }
      
    } else {
      // Handle failed callback (非200状态码)
      console.log(`Lyrics task ${taskId} generation failed: ${msg}`);

      try {
        // 更新数据库状态为错误
        const client = await pool.connect();
        try {
          const result = await client.query(
            `UPDATE lyrics_generations
             SET status = 'error', updated_at = NOW()
             WHERE task_id = $1
             RETURNING id, user_id`,
            [taskId]
          );

          if (result.rows.length > 0) {
            const lyricsGeneration = result.rows[0];

            // 创建错误记录
            await createGenerationError(
              'lyrics_generation',
              lyricsGeneration.id,
              msg || 'Lyrics generation API call failed',
              `API_ERROR_${code}`
            );

            console.log(`Error record created for API failed lyrics: ${lyricsGeneration.id}`);
          }
        } finally {
          client.release();
        }
      } catch (error) {
        console.error('Failed to update lyrics generation status:', error);
      }
    }
    
  } catch (error) {
    console.error('Async lyrics callback processing failed:', error);
    // Errors here won't affect callback response, only log
  }
}

// Periodically clean processed task cache to avoid memory leaks
setInterval(() => {
  if (processedLyricsTasks.size > 1000) {
    processedLyricsTasks.clear();
    console.log('Processed lyrics task cache cleared');
  }
}, 60 * 60 * 1000); // Clean every hour
